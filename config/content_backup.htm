<h1>About</h1>
<p>國立虎尾科技大學機械設計工程系</p>
<p>National Formosa University</p>
<p>Department of Mechanical Design Engineering</p>
<p>cp2024 計算機程式</p>
<p>課程教材:</p>
<p style="padding-left: 30px;"><a href="https://blog.jupyter.org/introducing-learn-python-with-jupyter-11214f152159">Learn Python with Jupyter</a> (<a href="https://www.learnpythonwithjupyter.com/">site</a>, <a href="https://localhost:9445/downloads/learn_python_with_jupyter.pdf">ebook</a>)</p>
<p style="padding-left: 30px;">教育版帳號 microsoftonline 登入點: <a href="https://login.microsoftonline.com/">https://login.microsoftonline.com/</a></p>
<p>Teams 線上教學:</p>
<p style="padding-left: 30px;">以 "學號@nfu.edu.tw" 登入 <a href="https://login.microsoftonline.com/">https://login.microsoftonline.com/</a> Office 365</p>
<p style="padding-left: 30px;">Teams 團隊代碼: fpqabi8</p>
<p>個人倉儲: <a href="https://github.com/mdecp2024/hw-yun-0705">https://github.com/mdecp2024/hw-yun-0705</a></p>
<p>個人網站: <a href="https://mdecp2024.github.io/hw-yun-0705">https://mdecp2024.github.io/hw-yun-0705</a></p>
<p>其他資訊:</p>
<p style="padding-left: 30px;"><a href="/downloads/cd2023_pj3ag4_zmq_football_4.7.7z">cd2023_pj3ag4_zmq_football_4.7.7z</a></p>
<p style="padding-left: 30px;"><a href="https://localhost:9446/downloads/cd2024_2b_g6_steel_ball_platform_nxopen_copsim.7z">cd2024_2b_g6_steel_ball_platform_nxopen_copsim.7z</a></p>
<h1>Attendance</h1>
<p>出席 (10%) - 自行舉證評分</p>
<p>自行利用 Github commits 提交記錄評分.</p>
<h1>HW 1</h1>
<h4>主題: 基於瀏覽器的分散式版次管理與整合程式開發環境 (10%)<span style="background-color: #ffff99;"><br/></span></h4>
<p style="padding-left: 30px;">USB 隨身碟:</p>
<p style="padding-left: 60px;">下載 <a href="http://229.cycu.org/python_2025_lite.7z">python_2025_lite.7z</a> (428 MB, 解開壓縮後約 1.5 GB)</p>
<p style="padding-left: 30px;"><a href="https://mde.tw/cp2024/content/Jupyter.html">Jupyter</a></p>
<p style="padding-left: 30px;">What are Github and Codespaces?</p>
<p style="padding-left: 60px;"><a href="https://docs.github.com/en/get-started/start-your-journey/hello-world">Hello World - GitHub Docs</a></p>
<p style="padding-left: 30px;">利用包含學號的字串作為帳號, 申請免費使用 Github.</p>
<p style="padding-left: 30px;">Python 課程教材: <a href="https://www.learnpythonwithjupyter.com/">https://www.learnpythonwithjupyter.com/</a> - PART 1</p>
<hr/>
<p>PART 1: Creating the basics 資料整理 (10%)</p>
<p>啟動可攜程式系統後, 在命令列中:</p>
<p>y:\&gt;cd notebook</p>
<p>y:\notebook&gt;jupyter lab --collaborative</p>
<p>進入 <a href="/downloads/01_string_input_print.ipynb">01_string_input_print.ipynb</a> 練習如何修改 PART1 notebook 後存檔, 上傳至作業倉儲中的 downloads 目錄後, 透過 <a href="https://nbviewer.org/">https://nbviewer.org/</a> 將已經提交的 <a href="/downloads/01_string_input_print.ipynb">01_string_input_print.ipynb</a>, 嵌入下列網頁中.</p>
<p><iframe height="400" src="https://nbviewer.org/urls/mde.tw/cp2024_hw/downloads/01_string_input_print.ipynb" width="600"></iframe></p>
<p>上列 iframe 標註的 html 語法:</p>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">&lt;iframe width="600" height="400" src="https://nbviewer.org/urls/mde.tw/cp2024_hw/downloads/01_string_input_print.ipynb"&gt;&lt;/iframe&gt;</pre>
<p>完成上述流程整理後, 請將 HW1 自評分數輸入 cp2024 自評表單中.</p>
<h2>HW 1 Exam</h2>
<p>每六人為一組進行協同程式練習</p>
<p>透過 Jupyterlab 協同網頁, 輪流指定各組編寫 Topic 1 相關的程式練習, 以及網頁內容 (localhost 與 Codespaces 環境)編輯.</p>
<h3>w15</h3>
<p>(<a href="https://mdecp2024.github.io/hw-yun-0705/content/Brython.html?src=https://gist.githubusercontent.com/yun-0705/06e4c889d381cdca36d69ca1bc6b340d/raw/195a7513f0560f228a3769aedeee7bf57c73b8a4/w15.py">從 1 累加到 100</a>)第一題</p>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">from browser import window

# 這個函數用來計算 1 加到 100
def calculate_sum():
    total = sum(range(1, 101))  # 使用 Python 的 sum 函數，計算從 1 到 100 的總和
    print(f"總和是: {total}")
    window.alert(f"總和是: {total}")  # 在瀏覽器彈出顯示結果

# 呼叫函數計算並顯示結果
calculate_sum()
</pre>
<p>(<a href="https://mdecp2024.github.io/hw-yun-0705/content/Brython.html?src=https://gist.githubusercontent.com/yun-0705/fae2f3648092347fce06860044cdb2c3/raw/a8e9edb49ac28640b4095e8e1af5c715a8e68fea/w15.py">addto</a>)第二題</p>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false"># 定義函數 addto，計算從 start 到 end 的總和
def addto(start, end):
    total = sum(range(start, end + 1))  # 使用 range 和 sum 計算總和
    return total

# 呼叫函數並顯示結果
result = addto(1, 100)
print(f"從 1 加到 100 的總和是: {result}")</pre>
<p>(<a href="https://mdecp2024.github.io/hw-yun-0705/content/Brython.html?src=https://gist.githubusercontent.com/yun-0705/a121835f2c24df3d6fb087ffd4132d48/raw/1aa4f22279b94baade4cbdc8840bb64671642f04/w15.py">add_only_even</a>)第三題</p>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">def add_1_to_100():
    total = 0
    for num in range(1, 101):  # 從 1 到 100 進行遍歷
        if num % 2 == 0:  # 只累加偶數
            total += num  # 累加偶數到 total
    return total

result = add_1_to_100()
print(result)  # 輸出 2550</pre>
<p>(<a href="https://mdecp2024.github.io/hw-yun-0705/content/Brython.html?src=https://gist.githubusercontent.com/yun-0705/d12920f1d4fcd28dbd186a1ea0f052c6/raw/6b7ba4806fa4d6bd4995d9a06debe6696cdf78ef/w15.py">add_avoid_8</a>)第四題</p>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">def add_avoid_8(start, end):
    total = 0
    
    # 從 start 到 end 遍歷所有數字
    for num in range(start, end + 1):
        # 檢查數字是否包含 '8'
        if '8' not in str(num):
            total += num  # 累加不包含 '8' 的數字
    
    return total

# 計算從 1 到 100 的總和，並避開包含 '8' 的數字
result = add_avoid_8(1, 100)
print(result)  # 輸出結果</pre>
<p>(<a href="https://mdecp2024.github.io/hw-yun-0705/content/Brython.html?src=https://gist.githubusercontent.com/yun-0705/ba09af804ff7547a391ce8e979f949b7/raw/2f002c3eacb7ca2ffaf1b364630a5a759ba1845f/w15.py">w15第五題</a>)<br/><br/></p><h3>w14_ex</h3>
<p>三個圓相切</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">from browser import html
from browser import document as doc
import random
import math

# 定義一個函式來初始化畫布
def initialize_canvas(canvas_width=400, canvas_height=400, id="brython_div1"):
    """
    初始化畫布，創建一個指定大小的 Canvas 元素，並將其加到 HTML 文件中。
    返回畫布元素和它的 2D 繪圖上下文。
    """
    # 創建一個 canvas 元素，並設置其寬度與高度
    canvas = html.CANVAS(width=canvas_width, height=canvas_height)
    # 將創建的 canvas 元素添加到指定的 HTML div 元素中
    brython_div = doc[id]  # 獲取指定 id 的 div 元素
    brython_div &lt;= canvas  # 將 canvas 插入到該 div 中
    
    # 獲取 canvas 的 2D 繪圖上下文，這是進行繪圖的主要接口
    ctx = canvas.getContext("2d")
    
    # 返回畫布和它的 2D 繪圖上下文
    return canvas, ctx

# 定義一個隨機顏色生成函式
def random_color_generator():
    """
    生成一個隨機的 RGB 顏色字符串。
    返回的顏色是 "rgb(r, g, b)" 格式，其中 r, g, b 是 0 到 255 之間的隨機整數。
    """
    r = random.randint(0, 255)  # 隨機生成紅色成分 (0-255)
    g = random.randint(0, 255)  # 隨機生成綠色成分 (0-255)
    b = random.randint(0, 255)  # 隨機生成藍色成分 (0-255)
    return f"rgb({r}, {g}, {b})"  # 返回隨機顏色字符串

# 判斷點 (px, py) 是否在圓內
def is_point_in_circle(px, py, cx, cy, r):
    """
    判斷一個點 (px, py) 是否位於圓 (cx, cy, r) 內。
    (cx, cy) 為圓心坐標，r 為圓的半徑。
    """
    # 使用圓的方程 (px - cx)² + (py - cy)² &lt;= r² 判斷點是否在圓內
    return (px - cx) ** 2 + (py - cy) ** 2 &lt;= r ** 2

# 使用者設定的圓心座標和半徑，並進行掃描線填充
def draw_circles(x1, y1, r1, x2, y2, r2, x3, y3, r3):
    """
    根據傳入的三個圓的圓心和半徑，繪製圓形並使用掃描線算法填充區域。
    x1, y1, r1 是圓1的圓心坐標和半徑
    x2, y2, r2 是圓2的圓心坐標和半徑
    x3, y3, r3 是圓3的圓心坐標和半徑
    """
    # 初始化畫布，創建並取得畫布和其 2D 上下文
    canvas, ctx = initialize_canvas(400, 400)
    
    # 清空畫布，以便重新繪製
    ctx.clearRect(0, 0, canvas.width, canvas.height)
    
    # 顏色區域存儲字典，存儲不同區域的顏色
    color_dict = {}

    # 使用掃描線方法填充區域，逐行掃描畫布上的每個像素
    for py in range(0, canvas.height):  # 遍歷每一行的 y 坐標
        # 當前掃描線的顏色初始化為 None，後面會根據位置選擇顏色
        current_color = None 
        
        # 遍歷當前行中的每個像素點 (px, py)
        for px in range(0, canvas.width):  # 遍歷每一列的 x 坐標
            # 判斷該點是否在圓1內
            in_circle1 = is_point_in_circle(px, py, x1, y1, r1)
            # 判斷該點是否在圓2內
            in_circle2 = is_point_in_circle(px, py, x2, y2, r2)
            # 判斷該點是否在圓3內
            in_circle3 = is_point_in_circle(px, py, x3, y3, r3)
            
            if in_circle1 and in_circle2 and in_circle3:
                # 如果點同時在三個圓內，則是交集區域
                if "intersection" not in color_dict:
                    # 如果還沒有為交集區域分配顏色，則分配一個隨機顏色
                    color_dict["intersection"] = random_color_generator()
                # 設置當前掃描線的顏色為交集區域的顏色
                current_color = color_dict["intersection"]
            elif in_circle1 and in_circle2:
                # 如果點同時在圓1和圓2內
                if "circle1_and_2" not in color_dict:
                    color_dict["circle1_and_2"] = random_color_generator()
                current_color = color_dict["circle1_and_2"]
            elif in_circle1 and in_circle3:
                # 如果點同時在圓1和圓3內
                if "circle1_and_3" not in color_dict:
                    color_dict["circle1_and_3"] = random_color_generator()
                current_color = color_dict["circle1_and_3"]
            elif in_circle2 and in_circle3:
                # 如果點同時在圓2和圓3內
                if "circle2_and_3" not in color_dict:
                    color_dict["circle2_and_3"] = random_color_generator()
                current_color = color_dict["circle2_and_3"]
            elif in_circle1:
                # 如果點只在圓1內
                if "circle1" not in color_dict:
                    color_dict["circle1"] = random_color_generator()
                current_color = color_dict["circle1"]
            elif in_circle2:
                # 如果點只在圓2內
                if "circle2" not in color_dict:
                    color_dict["circle2"] = random_color_generator()
                current_color = color_dict["circle2"]
            elif in_circle3:
                # 如果點只在圓3內
                if "circle3" not in color_dict:
                    color_dict["circle3"] = random_color_generator()
                current_color = color_dict["circle3"]
            else:
                # 如果點不在任何圓內，則是背景區域
                current_color = "white"  # 背景色設為白色
            
            # 設置當前像素的顏色並進行填充
            ctx.fillStyle = current_color
            # 填充當前像素 (px, py)，並且寬度和高度均為 1 像素
            ctx.fillRect(px, py, 1, 1)  # 填充一個像素

# 直接設定三個圓的圓心和半徑
x1, y1, r1 = 150, 200, 100  # 圓1：圓心 (150, 200)，半徑 100
x2, y2, r2 = 250, 200, 100  # 圓2：圓心 (250, 200)，半徑 100
x3, y3, r3 = 200, 100, 100  # 圓3：圓心 (200, 100)，半徑 100

# 呼叫畫圓函式，並繪製三個圓
draw_circles(x1, y1, r1, x2, y2, r2, x3, y3, r3)
</pre>
<p></p>
<p>隨機圓相切</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">from browser import html
from browser import document as doc
import random
import math

# 定義一個函式來初始化畫布
def initialize_canvas(canvas_width=400, canvas_height=400, id="brython_div1"):
    """
    初始化畫布，創建一個指定大小的 Canvas 元素，並將其加到 HTML 文件中。
    返回畫布元素和它的 2D 繪圖上下文。
    """
    canvas = html.CANVAS(width=canvas_width, height=canvas_height)
    brython_div = doc[id]
    brython_div &lt;= canvas
    ctx = canvas.getContext("2d")
    return canvas, ctx

# 定義一個隨機顏色生成函式
def random_color_generator():
    r = random.randint(0, 255)
    g = random.randint(0, 255)
    b = random.randint(0, 255)
    return f"rgb({r}, {g}, {b})"

# 判斷點是否在圓內
def is_point_in_circle(px, py, cx, cy, r):
    return (px - cx) ** 2 + (py - cy) ** 2 &lt;= r ** 2

# 檢查所有圓是否有重疊
def ensure_no_isolated_circles(circles):
    overlap = [False] * len(circles)
    for i in range(len(circles)):
        for j in range(i + 1, len(circles)):
            cx1, cy1, r1 = circles[i]
            cx2, cy2, r2 = circles[j]
            distance = math.sqrt((cx1 - cx2) ** 2 + (cy1 - cy2) ** 2)
            if distance &lt;= r1 + r2:  # 判斷是否有重疊
                overlap[i] = True
                overlap[j] = True
    return all(overlap)

# 使用者設定的多個圓，並進行掃描線填充
def draw_circles():
    canvas, ctx = initialize_canvas(400, 400)
    ctx.clearRect(0, 0, canvas.width, canvas.height)

    color_dict = {}

    # 隨機生成 5 到 10 個圓，確保沒有圓是孤立的
    while True:
        num_circles = random.randint(5, 10)
        circles = [
            (random.randint(50, 350), random.randint(50, 350), random.randint(50, 100))
            for _ in range(num_circles)
        ]
        if ensure_no_isolated_circles(circles):
            break

    for py in range(0, canvas.height):
        for px in range(0, canvas.width):
            overlapping_indices = []

            for i, (cx, cy, r) in enumerate(circles):
                if is_point_in_circle(px, py, cx, cy, r):
                    overlapping_indices.append(i)

            if overlapping_indices:
                overlap_key = "_".join(map(str, sorted(overlapping_indices)))
                if overlap_key not in color_dict:
                    color_dict[overlap_key] = random_color_generator()
                current_color = color_dict[overlap_key]
            else:
                current_color = "white"

            ctx.fillStyle = current_color
            ctx.fillRect(px, py, 1, 1)

draw_circles()</pre>
<p></p>
<h3>w13_hw</h3>
<p>(<a href="https://mdecp2024.github.io/hw-yun-0705/content/Brython.html?src=https://gist.githubusercontent.com/yun-0705/7ba418712a782172f54352dfc53568f1/raw/dac13d69e0bc941e7aebd1debd555706686e4c35/w13-hw.py">畫出線框</a>)</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">from browser import html
from browser import document as doc

# 設置畫布
canvas = html.CANVAS(width=600, height=600)
brython_div = doc["brython_div1"]
brython_div &lt;= canvas

ctx = canvas.getContext("2d")
ctx.lineWidth = 1

# 畫兩個矩形 (紅色邊框)
ctx.strokeStyle = 'red'
ctx.beginPath()
ctx.rect(100, 100, 200, 200)
ctx.rect(200, 200, 200, 200)
ctx.stroke()

# 畫對角線 (藍色)
ctx.strokeStyle = 'blue'
ctx.beginPath()
ctx.moveTo(100, 100)
ctx.lineTo(300, 300)
ctx.stroke()

# 畫兩個圓形 (黑色)
ctx.strokeStyle = 'black'
ctx.beginPath()
ctx.arc(200, 200, 141.4, 0, 2 * 3.14)
ctx.stroke()
ctx.beginPath()
ctx.arc(300, 300, 141.4, 0, 2 * 3.14)
ctx.stroke()</pre>
<p><br/><br/></p>
<p>(<a href="https://mdecp2024.github.io/hw-yun-0705/content/Brython.html?src=https://gist.githubusercontent.com/yun-0705/5033fa888219999d73d552e21256204f/raw/8d2bb92cd2c5dc6a3ede39ca0a2b1bd3fc3a61c6/w13-hw.py">著色方塊</a>)</p>
<!-- 引入 Brython 程式庫 -->
<script src="/static/brython.js"></script>
<script src="/static/brython_stdlib.js"></script>
<!-- 啟動 Brython -->
<script>
window.onload = function() {
    brython({debug:1, pythonpath:['/static/', '../../downloads/py/']});
}
</script>
<!-- 設置容器 -->
<div id="brython div1">
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">from browser import html
from browser import document as doc

# 設置畫布
canvas = html.CANVAS(width=600, height=600)
brython_div = doc["brython_div1"]
brython_div &lt;= canvas

ctx = canvas.getContext("2d")
ctx.lineWidth = 1

# 畫兩個矩形 (紅色邊框)
ctx.strokeStyle = 'red'
ctx.beginPath()
ctx.rect(100, 100, 200, 200)
ctx.rect(200, 200, 200, 200)
ctx.stroke()

# 畫對角線 (藍色)
ctx.strokeStyle = 'blue'
ctx.beginPath()
ctx.moveTo(100, 100)
ctx.lineTo(300, 300)
ctx.stroke()

# 畫兩個圓形 (黑色)
ctx.strokeStyle = 'black'
ctx.beginPath()
ctx.arc(200, 200, 141.4, 0, 2 * 3.14)
ctx.stroke()
ctx.beginPath()
ctx.arc(300, 300, 141.4, 0, 2 * 3.14)
ctx.stroke()


# 儲存幾何參數
shapes = {
    "circle1": (200, 200, 141.4),
    "circle2": (300, 300, 141.4),
    "square1": (100, 100, 300, 300),
    "square2": (200, 200, 400, 400),
}

# 簡化的判定函式
def is_in_circle(x, y, cx, cy, r):
    return (x - cx) ** 2 + (y - cy) ** 2 &lt; r ** 2

def is_in_square(x, y, x1, y1, x2, y2):
    return x1 &lt;= x &lt;= x2 and y1 &lt;= y &lt;= y2

# 根據點判定區域並返回顏色
def get_region_color(x, y):
    c1 = is_in_circle(x, y, *shapes["circle1"])
    c2 = is_in_circle(x, y, *shapes["circle2"])
    s1 = is_in_square(x, y, *shapes["square1"])
    s2 = is_in_square(x, y, *shapes["square2"])

    # 不在任何圓內
    if not c1 and not c2:
        return None

    # 同時在兩個圓內
    if c1 and c2:
        return "#FFE153"  

     # 第一個圓的判定
    if c1:
        if s1:
            return "#4A4AFF" if y &lt; x else "#96FED1" 
        if y &lt; shapes["square1"][1]:
            return "#8e40bf"  
        if y &gt; shapes["square1"][3]:
            return "#a6abc8"  
        if x &lt; shapes["square1"][0]:
            return "#c1e401"  
        if x &gt; shapes["square1"][2]:
            return "#fe522a"  

    # 第二個圓的判定
    if c2:
        if s2:
            return "#c6007c"  
        if y &lt; shapes["square2"][1]:
            return "#000f96"  
        if y &gt; shapes["square2"][3]:
            return "#e36e06"  
        if x &lt; shapes["square2"][0]:
            return "#0b8a00"  
        if x &gt; shapes["square2"][2]:
            return "#00809d"  

    return "#D3D3D3"  # 

# 繪製掃描點並著色
def scan_and_draw():
    step = 1  # 減小步長提升細膩程度
    for y in range(0, canvas.height, step):
        for x in range(0, canvas.width, step):
            color = get_region_color(x, y)
            if color:
                ctx.fillStyle = color
                ctx.fillRect(x, y, step, step)  # 使用細小矩形填充

# 開始掃描和著色
scan_and_draw()</pre>
</div>
<!-- 利用 Brython 繪圖 -->
<script type="text/python">
from browser import html
from browser import document as doc

# 利用 HTML 建立 canvas 並定義特性
canvas = html.CANVAS(width=600, height=600)
brython_div = doc["brython div1"]
brython_div <= canvas
ctx = canvas.getContext("2d")

ctx.strokeStyle = 'red'  # 設定矩形的邊框顏色為紅色
ctx.beginPath()
ctx.rect(100, 100, 200, 200)  # 第一個正方形的左上角在(100, 100)，邊長200
ctx.rect(200, 200, 200, 200)  # 第二個正方形的左上角在(200, 200)，邊長200
ctx.stroke()

# 2. 繪製對角線 (藍色) - 只連接第一個矩形的左上角和第一個矩形的右下角
ctx.strokeStyle = 'blue'  # 設定對角線顏色為藍色
ctx.beginPath()
ctx.moveTo(100, 100)  # 起點為第一個矩形的左上角 (100, 100)
ctx.lineTo(300, 300)  # 終點為第一個矩形的右下角 (300, 300)
ctx.stroke()

# 3. 繪製兩個外切圓 (黑色)
ctx.strokeStyle = 'black'  # 設定圓的顏色為黑色

# 第一個矩形的外切圓
ctx.beginPath()
ctx.arc(200, 200, 141.4, 0, 2 * 3.14)  # 圓心在(200, 200)，半徑為141.4（sqrt(2) * 邊長的一半）
ctx.stroke()

# 第二個矩形的外切圓
ctx.beginPath()
ctx.arc(300, 300, 141.4, 0, 2 * 3.14)  # 圓心在(300, 300)，半徑為141.4
ctx.stroke()
</script>
<!-- 引入 Brython 程式庫 -->
<script src="/static/brython.js"></script>
<script src="/static/brython_stdlib.js"></script>
<!-- 啟動 Brython -->
<script>
window.onload = function() {
    brython({debug:1, pythonpath:['/static/', '../../downloads/py/']});
}
</script>
<!-- 設置容器 -->
<div id="brython div1"></div>
<!-- 利用 Brython 繪圖 -->
<script type="text/python">
from browser import html
from browser import document as doc

# 利用 HTML 建立 canvas 並定義特性
canvas = html.CANVAS(width=600, height=600)
brython_div = doc["brython div1"]
brython_div <= canvas

ctx = canvas.getContext("2d")
ctx.lineWidth = 1

# 畫兩個矩形 (紅色邊框)
ctx.strokeStyle = 'red'
ctx.beginPath()
ctx.rect(100, 100, 200, 200)
ctx.rect(200, 200, 200, 200)
ctx.stroke()

# 畫對角線 (藍色)
ctx.strokeStyle = 'blue'
ctx.beginPath()
ctx.moveTo(100, 100)
ctx.lineTo(300, 300)
ctx.stroke()

# 畫兩個圓形 (黑色)
ctx.strokeStyle = 'black'
ctx.beginPath()
ctx.arc(200, 200, 141.4, 0, 2 * 3.14)
ctx.stroke()
ctx.beginPath()
ctx.arc(300, 300, 141.4, 0, 2 * 3.14)
ctx.stroke()


# 儲存幾何參數
shapes = {
    "circle1": (200, 200, 141.4),
    "circle2": (300, 300, 141.4),
    "square1": (100, 100, 300, 300),
    "square2": (200, 200, 400, 400),
}

# 簡化的判定函式
def is_in_circle(x, y, cx, cy, r):
    return (x - cx) ** 2 + (y - cy) ** 2 < r ** 2

def is_in_square(x, y, x1, y1, x2, y2):
    return x1 <= x <= x2 and y1 <= y <= y2

# 根據點判定區域並返回顏色
def get_region_color(x, y):
    c1 = is_in_circle(x, y, *shapes["circle1"])
    c2 = is_in_circle(x, y, *shapes["circle2"])
    s1 = is_in_square(x, y, *shapes["square1"])
    s2 = is_in_square(x, y, *shapes["square2"])

    # 不在任何圓內
    if not c1 and not c2:
        return None

    # 同時在兩個圓內
    if c1 and c2:
        return "#FFE153"  

    # 第一個圓的判定
    if c1:
        if s1:
            return "#4A4AFF" if y < x else "#96FED1" 
        if y < shapes["square1"][1]:
            return "#8e40bf"  
        if y > shapes["square1"][3]:
            return "#a6abc8"  
        if x < shapes["square1"][0]:
            return "#c1e401"  
        if x > shapes["square1"][2]:
            return "#fe522a"  

    # 第二個圓的判定
    if c2:
        if s2:
            return "#c6007c"  
        if y < shapes["square2"][1]:
            return "#000f96"  
        if y > shapes["square2"][3]:
            return "#e36e06"  
        if x < shapes["square2"][0]:
            return "#0b8a00"  
        if x > shapes["square2"][2]:
            return "#00809d"  

    return "#D3D3D3"  # 

# 繪製掃描點並著色
def scan_and_draw():
    step = 1  # 減小步長提升細膩程度
    for y in range(0, canvas.height, step):
        for x in range(0, canvas.width, step):
            color = get_region_color(x, y)
            if color:
                ctx.fillStyle = color
                ctx.fillRect(x, y, step, step)  # 使用細小矩形填充

# 開始掃描和著色
scan_and_draw()
</script>
<h3>w12</h3>
<p>簡易for迴圈程式(<a href="https://mdecp2024.github.io/hw-yun-0705/content/Brython.html?src=https://gist.githubusercontent.com/yun-0705/4e94b1a5f404a4210410446c0aa7ca36/raw/a23a585726f1c964e8f41313c7e5e42399d169ad/w12.py">for迴圈</a>)</p>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/jmWgUgZ6WI8" width="560"></iframe></p>
<p>程式:</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">n=10
for i in range(n):
    print("現在的數字是",(i))</pre>
<p></p>
<h3>w11_hw</h3>
<p><span>題目一:(<a href="https://mdecp2024.github.io/hw-yun-0705/content/Brython.html?src=https://gist.githubusercontent.com/yun-0705/ce93a836008e04479727eeba5c8d1e9d/raw/0533bb40517b70c105a313b88913f39f61870ea7/w11-hw.py">以"*"畫出空心圓</a>)</span></p>
<p><span>心得:利用ai打出需要的brython程式，過程中嘗試了解ai所打出程式的意思，但有理解的地方不多，還需要多加努力。</span></p>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/tccSgnxZb5w" width="560"></iframe></p>
<p>程式:</p>
<p></p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">def print_circle():
    # 11x11 的字元區域，圓心在 (5, 5)，半徑為 5
    cx, cy, r = 5, 5, 5
    
    # 繪製空心圓
    for y in range(11):
        for x in range(11):
            # 計算 (x, y) 是否在圓邊上
            if abs((x - cx)**2 + (y - cy)**2 - r**2) &lt; 2:
                print('*', end=' ')
            else:
                print(' ', end=' ')
        print()  # 換行

# 呼叫函數顯示圓形
print_circle()
</pre>
<p>題目二:(<a href="https://mdecp2024.github.io/hw-yun-0705/content/Brython.html?src=https://gist.githubusercontent.com/yun-0705/264d920807f1a7554f985e1bf8f4244c/raw/d2685d1184d10040e7424a6c6ed8cece845f5b3e/w11-hw.py">以方塊畫出空心圓</a>)</p>
<p>心得:跟題目一一樣是靠ai打出<span>需要的brython程式，需要注意的地方在於讓方塊11*11(為了讓方塊有中心點)，該程式篇幅較上一題題目還長，理解程度還可以，但還是有看不懂的地方需要多認識一下。</span></p>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/57BteDRUkDQ" width="560"></iframe></p>
<p>程式:</p>
<p></p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">from browser import html
from browser import document as doc

# 利用 html 建立 canvas 超文件物件
canvas = html.CANVAS(width=400, height=400)
brython_div = doc["brython_div1"]
brython_div &lt;= canvas

# 每一格的 pixel 數
gs = 20

# gs*tc = canvas width and height
ctx = canvas.getContext("2d")

def dRect(lux, luy, w, h, s=1, c='#ff0000'):
    ctx.lineWidth = s
    ctx.strokeStyle = c
    ctx.beginPath()
    ctx.rect(lux, luy, w, h)
    ctx.stroke()

def grid(width, height, grid_pix):
    # x 方向共 width 格
    # y 方向共 height 格
    # grid_pix, 每一個的 pixel 點數
    # 利用迴圈與座標增量繪圖
    for i in range(width):
        for j in range(height):
            dRect(i*grid_pix, j*grid_pix, grid_pix, grid_pix, 1, "lightgrey")

def fill(x, y, color):
    # 填充指定格子
    ctx.fillStyle = color
    ctx.fillRect(x * gs, y * gs, gs, gs)

def draw_hollow_circle(cx, cy, radius):
    # cx, cy: 圆心坐标 (以格子为单位)
    # radius: 半径 (以格子为单位)
    for x in range(-radius, radius + 1):
        for y in range(-radius, radius + 1):
            # 检查点是否在圆的边缘
            distance_squared = x**2 + y**2
            if radius**2 - radius &lt;= distance_squared &lt;= radius**2 + radius:
                fill(cx + x, cy + y, "black")

# 繪製 20x20 網格
grid(20, 20, gs)

# 在 (10, 10) 格為圓心繪製空心圓，半徑為 5 格
draw_hollow_circle(10, 10, 5)
</pre>
<p><img alt="" height="430" src="/images/chrome_FzNVgP8iP3.png" width="467"/><br/><br/></p>
<p></p>
<h3>w10</h3>
<p><br/><a href="https://youtu.be/tccSgnxZb5w"></a>題目一:</p>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/L-sMBIPEoeU" width="560"></iframe></p>
<p>題目二:</p>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/TFxuRXYcoNI" width="560"></iframe></p>
<p>題目三:</p>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/vBlBwVYTKfE" width="560"></iframe></p>
<h3>w7</h3>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/YqPFUNclNfs" width="560"></iframe></p>
<h1>HW 2</h1>
<h4>主題: Python 的數列、判斷式與重複迴圈 (20%)<span style="background-color: #ffff99;"><br/></span></h4>
<p style="padding-left: 30px;">Python 課程教材: <a href="https://www.learnpythonwithjupyter.com/">https://www.learnpythonwithjupyter.com/</a> - PART 2 and Part 3</p>
<hr/>
<p>延續 HW 1 網頁資料整理與程式練習方法, 整理下列內容 (20%):</p>
<p>PART 2: Introduction to lists and if/else statements</p>
<p>PART 3: Introduction to the for loop</p>
<p>完成上述流程整理後, 請將 HW2 自評分數輸入 cp2024 自評表單中.</p>
<h2>HW 2 Exam</h2>
<p>每六人為一組進行協同程式練習</p>
<p>透過 Jupyterlab 協同網頁, 輪流指定各組編寫 HW 2 相關的程式練習, 以及網頁內容 (localhost 與 Codespaces 環境)編輯.</p>
<h1>HW 3</h1>
<h4>主題: Python 的數字、演算法與迴圈 (20%)</h4>
<p style="padding-left: 30px;">Python 課程教材: <a href="https://www.learnpythonwithjupyter.com/">https://www.learnpythonwithjupyter.com/</a> - PART 4 and Part 5</p>
<p>完成上述流程整理後, 請將 HW3 自評分數輸入 cp2024 自評表單中.</p>
<h2>HW 3 Exam</h2>
<p>每六人為一組進行協同程式練習</p>
<p>透過 Jupyterlab 協同網頁, 輪流指定各組編寫 HW 3 相關的程式練習, 以及網頁內容 (localhost 與 Codespaces 環境)編輯.</p>
<h1>HW 4</h1>
<h4>主題: 利用 Python 控制機電模擬系統 (20%)</h4>
<p style="padding-left: 30px;">利用 <a href="https://solvespace.com/">https://solvespace.com/</a> 建立機械系統零組件</p>
<p style="padding-left: 30px;">利用 <a href="https://www.coppeliarobotics.com/">CoppeliaSim</a> 建立機電模擬系統</p>
<p style="padding-left: 30px;">利用 <a href="https://manual.coppeliarobotics.com/en/zmqRemoteApiOverview.htm">Python</a> 跨網路控制瀏覽器上的機電模擬系統</p>
<p style="padding-left: 30px;">範例:</p>
<p style="padding-left: 60px;"><a href="/downloads/cd2023_pj3ag4_zmq_football_4.7.7z">cd2023_pj3ag4_zmq_football_4.7.7z</a></p>
<p style="padding-left: 60px;"><a href="https://localhost:9446/downloads/cd2024_2b_g6_steel_ball_platform_nxopen_copsim.7z">cd2024_2b_g6_steel_ball_platform_nxopen_copsim.7z</a></p>
<p>完成上述流程整理後, 請將 HW4 自評分數輸入 cp2024 自評表單中.</p>
<h2>HW 4 Exam</h2>
<p>每六人為一組進行協同程式練習</p>
<p>透過 Jupyterlab 協同網頁, 輪流指定各組編寫 HW 4 相關的程式練習, 以及網頁內容 (localhost 與 Codespaces 環境)編輯.</p>
<h1>Final Report</h1>
<p>期末口頭與書面專題報告 (20%)</p>
<p>期末口頭專題報告影片:</p>
<p style="padding-left: 30px;">......</p>
<p>期末書面專題報告檔案 (pdf):</p>
<p style="padding-left: 30px;">......</p>
<p>電腦輔助設計與實習課程總結心得:</p>
<p style="padding-left: 30px;">......</p>
<p>期末報告自評成績:</p>
<p style="padding-left: 30px;">完成上述流程後, 請將 Final Report 自評分數輸入 cp2024 自評表單中.</p>
<p style="padding-left: 30px;"></p>
<h1>Brython</h1>
<p>從 1 累加到 100:</p>
<p><button id="add1to100">1 add to 100</button></p>
<!-- 導入 brython 程式庫 -->
<p>
<script src="/static/brython.js"></script>
<script src="/static/brython_stdlib.js"></script>
</p>
<!-- 啟動 Brython -->
<p>
<script>
window.onload=function(){
brython({debug:1, pythonpath:['/static/','./../downloads/py/']});
}
</script>
</p>
<p><!-- 導入 FileSaver 與 filereader --></p>
<p>
<script src="/static/ace/FileSaver.min.js" type="text/javascript"></script>
<script src="/static/ace/filereader.js" type="text/javascript"></script>
</p>
<p><!-- 導入 ace --></p>
<p>
<script src="/static/ace/ace.js" type="text/javascript"></script>
<script src="/static/ace/ext-language_tools.js" type="text/javascript"></script>
<script src="/static/ace/mode-python3.js" type="text/javascript"></script>
<script src="/static/ace/snippets/python.js" type="text/javascript"></script>
</p>
<p><!-- 導入 gearUtils-0.9.js Cango 齒輪繪圖程式庫 -->
<script src="/static/Cango-24v03-min.js"></script>
<script src="/static/gearUtils-09.js"></script>
<script src="/static/SVGpathUtils-6v03-min.js"></script>
<script src="/static/sylvester.js"></script>
<script src="/static/PrairieDraw.js"></script>
</p>
<p><!-- 請注意, 這裡使用 Javascript 將 localStorage["kw_py_src1"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--></p>
<p>
<script type="text/javascript">
function doSave(storage_id, filename){
    var blob = new Blob([localStorage[storage_id]], {type: "text/plain;charset=utf-8"});
    filename = document.getElementById(filename).value
    saveAs(blob, filename+".py");
}
</script>
</p>
<p>
<script type="text/python3">
from browser import document as doc
import ace
# 清除畫布
def clear_bd1(ev):
    bd = doc["brython_div1"]
    bd.clear()
Ace1 = ace.Editor(editor_id="kw_editor1", console_id="kw_console1", container_id="kw__container1", storage_id="kw_py_src1" )
# 從 gist 取出程式碼後, 放入 editor 作為 default 程式
def run1():
    # 利用 get 取下 src 變數值
    try:
        url = doc.query["src"]
    except:
        url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c3a6deaf717f8f2739a4b1392a5ab10936e9693a/from_1_add_to_10_1.py"
    prog = open(url).read()

    # 將程式載入編輯區
    Ace1.editor.setValue(prog)
    Ace1.editor.scrollToRow(0)
    Ace1.editor.gotoLine(0)
    # 直接執行程式
    #ns = {'__name__':'__main__'}
    #exec(prog, ns)
    # 按下 run 按鈕
    Ace1.run()

# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['kw_run1'].bind('click', Ace1.run)
doc['kw_show_console1'].bind('click', Ace1.show_console)
doc['kw_clear_console1'].bind('click', Ace1.clear_console)
doc['clear_bd1'].bind('click', clear_bd1)
# 呼叫函式執行
run1()
</script>
</p>
<p><!-- add 1 to 100 開始 -->
<script type="text/python3">
from browser import document as doc
import ace

# 清除畫布
def clear_bd1(ev):
    bd = doc["brython_div1"]
    bd.clear()

# 利用 ace 中的 Editor 建立 Ace2 物件, 其中的輸入變數分別對應到頁面中的編輯區物件
Ace2 = ace.Editor(editor_id="kw_editor1", console_id="kw_console1", container_id="kw__container1", storage_id="kw_py_src1" )

add1to100_url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c48e37714f055c3a0027cbfef59e442a6ef659b9/from_1_add_to_100_1.py"

# 從 gist 取得程式碼
add_src = open(add1to100_url).read()
def add(ev):
    Ace2.editor.setValue(add_src)
    Ace2.editor.scrollToRow(0)
    Ace2.editor.gotoLine(0)
    Ace2.run()

# id 為 "add1to100" 的按鈕點按時, 執行 add 方法
doc["add1to100"].bind('click', add)
</script>
</p>
<p><!-- add 1 to 100 結束--></p>
<!-- editor1 開始 -->
<p><!-- 用來顯示程式碼的 editor 區域 --></p>
<div id="kw_editor1" style="width: 600px; height: 300px;"></div>
<p><!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --></p>
<p><!-- 存擋表單開始 --></p>
<form><label>Filename: <input id="kw_filename" placeholder="input file name" type="text"/>.py</label> <input onclick="doSave('kw_py_src1', 'kw_filename1');" type="submit" value="Save"/></form>
<p><!-- 存擋表單結束 --></p>
<p></p>
<p><!-- 執行與清除按鈕開始 --></p>
<p><button id="kw_run1">Run</button> <button id="kw_show_console1">Output</button> <button id="kw_clear_console1">清除輸出區</button><button id="clear_bd1">清除繪圖區</button><button onclick="window.location.reload()">Reload</button></p>
<p><!-- 執行與清除按鈕結束 --></p>
<p></p>
<p><!-- 程式執行 ouput 區 --></p>
<div style="width: 100%; height: 100%;"><textarea autocomplete="off" id="kw_console1"></textarea></div>
<p><!-- Brython 程式執行的結果, 都以 brython_div1 作為切入位置 --></p>
<div id="brython_div1"></div>
<!-- editor1 結束 --><hr/><!-- ########################################## -->
<p>從 1 累加到 100 part2:</p>
<p><button id="add1to100part2">1 add to 100</button><button id="cango_three_gears">cango_three_gears</button><button id="bsnake">BSnake</button><button id="aitetris">AI Tetris</button><button id="threejsblock">Rotating Block</button></p>
<p><!-- 請注意, 這裡使用 Javascript 將 localStorage["kw_py_src2"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--></p>
<p>
<script type="text/python3">
from browser import document as doc
import ace
# 清除畫布
def clear_bd2(ev):
    bd = doc["brython_div2"]
    bd.clear()
Ace3 = ace.Editor(editor_id="kw_editor2", console_id="kw_console2", container_id="kw__container2", storage_id="kw_py_src2" )
# 從 gist 取出程式碼後, 放入 editor 作為 default 程式
def run2():
    # 利用 get 取下 src 變數值
    try:
        url = doc.query["src2"]
    except:
        url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c3a6deaf717f8f2739a4b1392a5ab10936e9693a/from_1_add_to_10_1.py"
    prog = open(url).read()

    # 將程式載入編輯區
    Ace3.editor.setValue(prog)
    Ace3.editor.scrollToRow(0)
    Ace3.editor.gotoLine(0)
    # 直接執行程式
    #ns = {'__name__':'__main__'}
    #exec(prog, ns)
    # 按下 run 按鈕
    Ace3.run()

# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['kw_run2'].bind('click', Ace3.run)
doc['kw_show_console2'].bind('click', Ace3.show_console)
doc['kw_clear_console2'].bind('click', Ace3.clear_console)
doc['clear_bd2'].bind('click', clear_bd2)
# 呼叫函式執行
run2()
</script>
</p>
<p><!-- add 1 to 100 part2 開始 -->
<script type="text/python3">
from browser import document as doc
import ace

# 清除畫布
def clear_bd2(ev):
    bd = doc["brython_div2"]
    bd.clear()

# 利用 ace 中的 Editor 建立 Ace2 物件, 其中的輸入變數分別對應到頁面中的編輯區物件
Ace4 = ace.Editor(editor_id="kw_editor2", console_id="kw_console2", container_id="kw__container2", storage_id="kw_py_src2" )

# 透過 Ace4 以類別建立一個通用的 button2, 可以在多個案例中將 gist 程導入編輯區

class button2:
    def __init__(self, url):
        self.url = url

    # 記得加入 event 輸入變數
    def do(self,ev):
        Ace4.editor.setValue(open(self.url).read())
        Ace4.editor.scrollToRow(0)
        Ace4.editor.gotoLine(0)
        Ace4.run()

add1to100_url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c48e37714f055c3a0027cbfef59e442a6ef659b9/from_1_add_to_100_1.py"

# 從 gist 取得程式碼
add_src = open(add1to100_url).read()
def add2(ev):
    Ace4.editor.setValue(add_src)
    Ace4.editor.scrollToRow(0)
    Ace4.editor.gotoLine(0)
    Ace4.run()

# id 為 "add1to100part2" 的按鈕點按時, 執行 add 方法
doc["add1to100part2"].bind('click', add2)
# 以下為運用 button2 class 的通用 gist 程式導入區
################################## cango_three_gears start
cango_three_gears_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/cango_three_gears_brython_div2.py"
cango_three_gears = button2(cango_three_gears_url)
doc["cango_three_gears"].bind("click", cango_three_gears.do)
################################## cango_three_gears end
################################## bsnake start
bsnake_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/kmol_snakey.py"
bsnake = button2(bsnake_url)
doc["bsnake"].bind("click", bsnake.do)
################################## bsnake end
################################## aitetris start
aitetris_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/pygame_to_brython_tetris_ai.py"
aitetris = button2(aitetris_url)
doc["aitetris"].bind("click", aitetris.do)
################################## aitetris end
################################## threejsblock start
threejsblock_url = "https://gist.githubusercontent.com/mdecycu/2c6323eff49b496d1bafd210f3ec9707/raw/df37802f9e8a386b6424f7945af622b1cd0a9ca5/threejs_rotating_block.py"
threejsblock = button2(threejsblock_url)
doc["threejsblock"].bind("click", threejsblock.do)
################################## threejsblock end
</script>
</p>
<p><!-- add 1 to 100 part2 結束--></p>
<!-- editor2 開始 -->
<p><!-- 用來顯示程式碼的 editor 區域 --></p>
<div id="kw_editor2" style="width: 600px; height: 300px;"></div>
<p><!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --></p>
<p><!-- 存擋表單開始 --></p>
<form><label>Filename: <input id="kw_filename2" placeholder="input file name" type="text"/>.py</label> <input onclick="doSave('kw_py_src2', 'kw_filename2');" type="submit" value="Save"/></form>
<p><!-- 存擋表單結束 --></p>
<p></p>
<p><!-- 執行與清除按鈕開始 --></p>
<p><button id="kw_run2">Run</button> <button id="kw_show_console2">Output</button> <button id="kw_clear_console2">清除輸出區</button><button id="clear_bd2">清除繪圖區</button><button onclick="window.location.reload()">Reload</button></p>
<p><!-- 執行與清除按鈕結束 --></p>
<p></p>
<p><!-- 程式執行 ouput 區 --></p>
<div style="width: 100%; height: 100%;"><textarea autocomplete="off" id="kw_console2"></textarea></div>
<p><!-- Brython 程式執行的結果, 都以 brython_div1 作為切入位置 --></p>
<div id="brython_div2"></div>
<p>
<script src="https://unpkg.com/three@0.144.0/build/three.js" type="text/javascript"></script>
</p>